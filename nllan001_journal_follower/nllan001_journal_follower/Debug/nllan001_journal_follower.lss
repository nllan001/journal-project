
nllan001_journal_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000f28  00000fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063a  00800112  00800112  00000fce  2**0
                  ALLOC
  3 .stab         00000888  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001f4  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000358  00000000  00000000  00001a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a9d  00000000  00000000  00001dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d8b  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000023af  00000000  00000000  000065fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000904  00000000  00000000  000089ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000107e  00000000  00000000  000092b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002c1e  00000000  00000000  0000a32e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000398  00000000  00000000  0000cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	02 c4       	rjmp	.+2052   	; 0x83a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e2       	ldi	r30, 0x28	; 40
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 34       	cpi	r26, 0x4C	; 76
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2a d2       	rcall	.+1108   	; 0x518 <main>
  c4:	2f c7       	rjmp	.+3678   	; 0xf24 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	12 d5       	rcall	.+2596   	; 0xaf4 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	40 91 12 01 	lds	r20, 0x0112
  d4:	50 91 13 01 	lds	r21, 0x0113
  d8:	9e 01       	movw	r18, r28
  da:	24 0f       	add	r18, r20
  dc:	35 1f       	adc	r19, r21
  de:	2c 3d       	cpi	r18, 0xDC	; 220
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	38 07       	cpc	r19, r24
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	42 17       	cp	r20, r18
  e8:	53 07       	cpc	r21, r19
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	ea 01       	movw	r28, r20
  ee:	cc 5e       	subi	r28, 0xEC	; 236
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	30 93 13 01 	sts	0x0113, r19
  f6:	20 93 12 01 	sts	0x0112, r18
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 106:	bd d5       	rcall	.+2938   	; 0xc82 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	8c 2f       	mov	r24, r28
 10a:	9d 2f       	mov	r25, r29
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 112:	08 95       	ret

00000114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 114:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 116:	03 96       	adiw	r24, 0x03	; 3
 118:	92 83       	std	Z+2, r25	; 0x02
 11a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	3f ef       	ldi	r19, 0xFF	; 255
 120:	34 83       	std	Z+4, r19	; 0x04
 122:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 124:	96 83       	std	Z+6, r25	; 0x06
 126:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 128:	90 87       	std	Z+8, r25	; 0x08
 12a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12c:	10 82       	st	Z, r1
 12e:	08 95       	ret

00000130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 130:	fc 01       	movw	r30, r24
 132:	11 86       	std	Z+9, r1	; 0x09
 134:	10 86       	std	Z+8, r1	; 0x08
 136:	08 95       	ret

00000138 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	fc 01       	movw	r30, r24
 13e:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 140:	21 81       	ldd	r18, Z+1	; 0x01
 142:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 144:	e9 01       	movw	r28, r18
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	9b 81       	ldd	r25, Y+3	; 0x03
 14a:	13 96       	adiw	r26, 0x03	; 3
 14c:	9c 93       	st	X, r25
 14e:	8e 93       	st	-X, r24
 150:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 152:	81 81       	ldd	r24, Z+1	; 0x01
 154:	92 81       	ldd	r25, Z+2	; 0x02
 156:	15 96       	adiw	r26, 0x05	; 5
 158:	9c 93       	st	X, r25
 15a:	8e 93       	st	-X, r24
 15c:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	9b 81       	ldd	r25, Y+3	; 0x03
 162:	ec 01       	movw	r28, r24
 164:	7d 83       	std	Y+5, r23	; 0x05
 166:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 168:	e9 01       	movw	r28, r18
 16a:	7b 83       	std	Y+3, r23	; 0x03
 16c:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16e:	72 83       	std	Z+2, r23	; 0x02
 170:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 172:	19 96       	adiw	r26, 0x09	; 9
 174:	fc 93       	st	X, r31
 176:	ee 93       	st	-X, r30
 178:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 17a:	80 81       	ld	r24, Z
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 83       	st	Z, r24
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18c:	48 81       	ld	r20, Y
 18e:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 190:	4f 3f       	cpi	r20, 0xFF	; 255
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	52 07       	cpc	r21, r18
 196:	31 f4       	brne	.+12     	; 0x1a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 198:	dc 01       	movw	r26, r24
 19a:	17 96       	adiw	r26, 0x07	; 7
 19c:	ed 91       	ld	r30, X+
 19e:	fc 91       	ld	r31, X
 1a0:	18 97       	sbiw	r26, 0x08	; 8
 1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a4:	fc 01       	movw	r30, r24
 1a6:	33 96       	adiw	r30, 0x03	; 3
 1a8:	dc 01       	movw	r26, r24
 1aa:	15 96       	adiw	r26, 0x05	; 5
 1ac:	2d 91       	ld	r18, X+
 1ae:	3c 91       	ld	r19, X
 1b0:	16 97       	sbiw	r26, 0x06	; 6
 1b2:	d9 01       	movw	r26, r18
 1b4:	2d 91       	ld	r18, X+
 1b6:	3c 91       	ld	r19, X
 1b8:	42 17       	cp	r20, r18
 1ba:	53 07       	cpc	r21, r19
 1bc:	50 f0       	brcs	.+20     	; 0x1d2 <vListInsert+0x4c>
 1be:	02 80       	ldd	r0, Z+2	; 0x02
 1c0:	f3 81       	ldd	r31, Z+3	; 0x03
 1c2:	e0 2d       	mov	r30, r0
 1c4:	a2 81       	ldd	r26, Z+2	; 0x02
 1c6:	b3 81       	ldd	r27, Z+3	; 0x03
 1c8:	2d 91       	ld	r18, X+
 1ca:	3c 91       	ld	r19, X
 1cc:	42 17       	cp	r20, r18
 1ce:	53 07       	cpc	r21, r19
 1d0:	b0 f7       	brcc	.-20     	; 0x1be <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d2:	a2 81       	ldd	r26, Z+2	; 0x02
 1d4:	b3 81       	ldd	r27, Z+3	; 0x03
 1d6:	bb 83       	std	Y+3, r27	; 0x03
 1d8:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1da:	15 96       	adiw	r26, 0x05	; 5
 1dc:	dc 93       	st	X, r29
 1de:	ce 93       	st	-X, r28
 1e0:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e2:	fd 83       	std	Y+5, r31	; 0x05
 1e4:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e6:	d3 83       	std	Z+3, r29	; 0x03
 1e8:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1ea:	99 87       	std	Y+9, r25	; 0x09
 1ec:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 81       	ld	r18, Z
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	20 83       	st	Z, r18
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fc:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fe:	a2 81       	ldd	r26, Z+2	; 0x02
 200:	b3 81       	ldd	r27, Z+3	; 0x03
 202:	84 81       	ldd	r24, Z+4	; 0x04
 204:	95 81       	ldd	r25, Z+5	; 0x05
 206:	15 96       	adiw	r26, 0x05	; 5
 208:	9c 93       	st	X, r25
 20a:	8e 93       	st	-X, r24
 20c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20e:	a4 81       	ldd	r26, Z+4	; 0x04
 210:	b5 81       	ldd	r27, Z+5	; 0x05
 212:	82 81       	ldd	r24, Z+2	; 0x02
 214:	93 81       	ldd	r25, Z+3	; 0x03
 216:	13 96       	adiw	r26, 0x03	; 3
 218:	9c 93       	st	X, r25
 21a:	8e 93       	st	-X, r24
 21c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21e:	a0 85       	ldd	r26, Z+8	; 0x08
 220:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 222:	11 96       	adiw	r26, 0x01	; 1
 224:	8d 91       	ld	r24, X+
 226:	9c 91       	ld	r25, X
 228:	12 97       	sbiw	r26, 0x02	; 2
 22a:	8e 17       	cp	r24, r30
 22c:	9f 07       	cpc	r25, r31
 22e:	31 f4       	brne	.+12     	; 0x23c <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 230:	84 81       	ldd	r24, Z+4	; 0x04
 232:	95 81       	ldd	r25, Z+5	; 0x05
 234:	12 96       	adiw	r26, 0x02	; 2
 236:	9c 93       	st	X, r25
 238:	8e 93       	st	-X, r24
 23a:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23c:	11 86       	std	Z+9, r1	; 0x09
 23e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 240:	8c 91       	ld	r24, X
 242:	81 50       	subi	r24, 0x01	; 1
 244:	8c 93       	st	X, r24
 246:	08 95       	ret

00000248 <SetBit>:
	if(input < photoValue) {
		return true;
	} else {
		return false;
	}
}
 248:	44 23       	and	r20, r20
 24a:	51 f0       	breq	.+20     	; 0x260 <SetBit+0x18>
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	9a 01       	movw	r18, r20
 252:	02 c0       	rjmp	.+4      	; 0x258 <SetBit+0x10>
 254:	22 0f       	add	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <SetBit+0xc>
 25c:	82 2b       	or	r24, r18
 25e:	08 95       	ret
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	a9 01       	movw	r20, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <SetBit+0x24>
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <SetBit+0x20>
 270:	ba 01       	movw	r22, r20
 272:	60 95       	com	r22
 274:	86 23       	and	r24, r22
 276:	08 95       	ret

00000278 <GetBit>:
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	a9 01       	movw	r20, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <GetBit+0xc>
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <GetBit+0x8>
 288:	84 23       	and	r24, r20
 28a:	08 95       	ret

0000028c <GetKeypadKey>:
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	64 e0       	ldi	r22, 0x04	; 4
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	da df       	rcall	.-76     	; 0x248 <SetBit>
 294:	85 b9       	out	0x05, r24	; 5
 296:	00 00       	nop
 298:	83 b1       	in	r24, 0x03	; 3
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	80 95       	com	r24
 29e:	ec df       	rcall	.-40     	; 0x278 <GetBit>
 2a0:	81 11       	cpse	r24, r1
 2a2:	6e c0       	rjmp	.+220    	; 0x380 <GetKeypadKey+0xf4>
 2a4:	83 b1       	in	r24, 0x03	; 3
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	80 95       	com	r24
 2aa:	e6 df       	rcall	.-52     	; 0x278 <GetBit>
 2ac:	81 11       	cpse	r24, r1
 2ae:	6a c0       	rjmp	.+212    	; 0x384 <GetKeypadKey+0xf8>
 2b0:	83 b1       	in	r24, 0x03	; 3
 2b2:	62 e0       	ldi	r22, 0x02	; 2
 2b4:	80 95       	com	r24
 2b6:	e0 df       	rcall	.-64     	; 0x278 <GetBit>
 2b8:	81 11       	cpse	r24, r1
 2ba:	66 c0       	rjmp	.+204    	; 0x388 <GetKeypadKey+0xfc>
 2bc:	83 b1       	in	r24, 0x03	; 3
 2be:	63 e0       	ldi	r22, 0x03	; 3
 2c0:	80 95       	com	r24
 2c2:	da df       	rcall	.-76     	; 0x278 <GetBit>
 2c4:	81 11       	cpse	r24, r1
 2c6:	62 c0       	rjmp	.+196    	; 0x38c <GetKeypadKey+0x100>
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	65 e0       	ldi	r22, 0x05	; 5
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	bc df       	rcall	.-136    	; 0x248 <SetBit>
 2d0:	85 b9       	out	0x05, r24	; 5
 2d2:	00 00       	nop
 2d4:	83 b1       	in	r24, 0x03	; 3
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	80 95       	com	r24
 2da:	ce df       	rcall	.-100    	; 0x278 <GetBit>
 2dc:	81 11       	cpse	r24, r1
 2de:	58 c0       	rjmp	.+176    	; 0x390 <GetKeypadKey+0x104>
 2e0:	83 b1       	in	r24, 0x03	; 3
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	80 95       	com	r24
 2e6:	c8 df       	rcall	.-112    	; 0x278 <GetBit>
 2e8:	81 11       	cpse	r24, r1
 2ea:	54 c0       	rjmp	.+168    	; 0x394 <GetKeypadKey+0x108>
 2ec:	83 b1       	in	r24, 0x03	; 3
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	80 95       	com	r24
 2f2:	c2 df       	rcall	.-124    	; 0x278 <GetBit>
 2f4:	81 11       	cpse	r24, r1
 2f6:	50 c0       	rjmp	.+160    	; 0x398 <GetKeypadKey+0x10c>
 2f8:	83 b1       	in	r24, 0x03	; 3
 2fa:	63 e0       	ldi	r22, 0x03	; 3
 2fc:	80 95       	com	r24
 2fe:	bc df       	rcall	.-136    	; 0x278 <GetBit>
 300:	81 11       	cpse	r24, r1
 302:	4c c0       	rjmp	.+152    	; 0x39c <GetKeypadKey+0x110>
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	66 e0       	ldi	r22, 0x06	; 6
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	9e df       	rcall	.-196    	; 0x248 <SetBit>
 30c:	85 b9       	out	0x05, r24	; 5
 30e:	00 00       	nop
 310:	83 b1       	in	r24, 0x03	; 3
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	80 95       	com	r24
 316:	b0 df       	rcall	.-160    	; 0x278 <GetBit>
 318:	81 11       	cpse	r24, r1
 31a:	42 c0       	rjmp	.+132    	; 0x3a0 <GetKeypadKey+0x114>
 31c:	83 b1       	in	r24, 0x03	; 3
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	80 95       	com	r24
 322:	aa df       	rcall	.-172    	; 0x278 <GetBit>
 324:	81 11       	cpse	r24, r1
 326:	3e c0       	rjmp	.+124    	; 0x3a4 <GetKeypadKey+0x118>
 328:	83 b1       	in	r24, 0x03	; 3
 32a:	62 e0       	ldi	r22, 0x02	; 2
 32c:	80 95       	com	r24
 32e:	a4 df       	rcall	.-184    	; 0x278 <GetBit>
 330:	81 11       	cpse	r24, r1
 332:	3a c0       	rjmp	.+116    	; 0x3a8 <GetKeypadKey+0x11c>
 334:	83 b1       	in	r24, 0x03	; 3
 336:	63 e0       	ldi	r22, 0x03	; 3
 338:	80 95       	com	r24
 33a:	9e df       	rcall	.-196    	; 0x278 <GetBit>
 33c:	81 11       	cpse	r24, r1
 33e:	36 c0       	rjmp	.+108    	; 0x3ac <GetKeypadKey+0x120>
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	67 e0       	ldi	r22, 0x07	; 7
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	80 df       	rcall	.-256    	; 0x248 <SetBit>
 348:	85 b9       	out	0x05, r24	; 5
 34a:	00 00       	nop
 34c:	83 b1       	in	r24, 0x03	; 3
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	80 95       	com	r24
 352:	92 df       	rcall	.-220    	; 0x278 <GetBit>
 354:	81 11       	cpse	r24, r1
 356:	2c c0       	rjmp	.+88     	; 0x3b0 <GetKeypadKey+0x124>
 358:	83 b1       	in	r24, 0x03	; 3
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	80 95       	com	r24
 35e:	8c df       	rcall	.-232    	; 0x278 <GetBit>
 360:	81 11       	cpse	r24, r1
 362:	28 c0       	rjmp	.+80     	; 0x3b4 <GetKeypadKey+0x128>
 364:	83 b1       	in	r24, 0x03	; 3
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	80 95       	com	r24
 36a:	86 df       	rcall	.-244    	; 0x278 <GetBit>
 36c:	81 11       	cpse	r24, r1
 36e:	24 c0       	rjmp	.+72     	; 0x3b8 <GetKeypadKey+0x12c>
 370:	83 b1       	in	r24, 0x03	; 3
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	80 95       	com	r24
 376:	80 df       	rcall	.-256    	; 0x278 <GetBit>
 378:	88 23       	and	r24, r24
 37a:	01 f1       	breq	.+64     	; 0x3bc <GetKeypadKey+0x130>
 37c:	84 e4       	ldi	r24, 0x44	; 68
 37e:	08 95       	ret
 380:	81 e3       	ldi	r24, 0x31	; 49
 382:	08 95       	ret
 384:	84 e3       	ldi	r24, 0x34	; 52
 386:	08 95       	ret
 388:	87 e3       	ldi	r24, 0x37	; 55
 38a:	08 95       	ret
 38c:	8a e2       	ldi	r24, 0x2A	; 42
 38e:	08 95       	ret
 390:	82 e3       	ldi	r24, 0x32	; 50
 392:	08 95       	ret
 394:	85 e3       	ldi	r24, 0x35	; 53
 396:	08 95       	ret
 398:	88 e3       	ldi	r24, 0x38	; 56
 39a:	08 95       	ret
 39c:	80 e3       	ldi	r24, 0x30	; 48
 39e:	08 95       	ret
 3a0:	83 e3       	ldi	r24, 0x33	; 51
 3a2:	08 95       	ret
 3a4:	86 e3       	ldi	r24, 0x36	; 54
 3a6:	08 95       	ret
 3a8:	89 e3       	ldi	r24, 0x39	; 57
 3aa:	08 95       	ret
 3ac:	83 e2       	ldi	r24, 0x23	; 35
 3ae:	08 95       	ret
 3b0:	81 e4       	ldi	r24, 0x41	; 65
 3b2:	08 95       	ret
 3b4:	82 e4       	ldi	r24, 0x42	; 66
 3b6:	08 95       	ret
 3b8:	83 e4       	ldi	r24, 0x43	; 67
 3ba:	08 95       	ret
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	08 95       	ret

000003c0 <initUSART>:
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	81 f0       	breq	.+32     	; 0x3e4 <initUSART+0x24>
 3c4:	e1 ec       	ldi	r30, 0xC1	; 193
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	88 61       	ori	r24, 0x18	; 24
 3cc:	80 83       	st	Z, r24
 3ce:	e2 ec       	ldi	r30, 0xC2	; 194
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	86 60       	ori	r24, 0x06	; 6
 3d6:	80 83       	st	Z, r24
 3d8:	83 e3       	ldi	r24, 0x33	; 51
 3da:	80 93 c4 00 	sts	0x00C4, r24
 3de:	10 92 c5 00 	sts	0x00C5, r1
 3e2:	08 95       	ret
 3e4:	e9 ec       	ldi	r30, 0xC9	; 201
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	88 61       	ori	r24, 0x18	; 24
 3ec:	80 83       	st	Z, r24
 3ee:	ea ec       	ldi	r30, 0xCA	; 202
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	86 60       	ori	r24, 0x06	; 6
 3f6:	80 83       	st	Z, r24
 3f8:	83 e3       	ldi	r24, 0x33	; 51
 3fa:	80 93 cc 00 	sts	0x00CC, r24
 3fe:	10 92 cd 00 	sts	0x00CD, r1
 402:	08 95       	ret

00000404 <USART_IsSendReady>:
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	21 f0       	breq	.+8      	; 0x410 <USART_IsSendReady+0xc>
 408:	80 91 c0 00 	lds	r24, 0x00C0
 40c:	80 72       	andi	r24, 0x20	; 32
 40e:	08 95       	ret
 410:	80 91 c8 00 	lds	r24, 0x00C8
 414:	80 72       	andi	r24, 0x20	; 32
 416:	08 95       	ret

00000418 <USART_HasTransmitted>:
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	21 f0       	breq	.+8      	; 0x424 <USART_HasTransmitted+0xc>
 41c:	80 91 c0 00 	lds	r24, 0x00C0
 420:	80 74       	andi	r24, 0x40	; 64
 422:	08 95       	ret
 424:	80 91 c8 00 	lds	r24, 0x00C8
 428:	80 74       	andi	r24, 0x40	; 64
 42a:	08 95       	ret

0000042c <USART_Flush>:
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	29 f4       	brne	.+10     	; 0x43a <USART_Flush+0xe>
 430:	80 91 c8 00 	lds	r24, 0x00C8
 434:	88 23       	and	r24, r24
 436:	84 f0       	brlt	.+32     	; 0x458 <USART_Flush+0x2c>
 438:	08 95       	ret
 43a:	80 91 c0 00 	lds	r24, 0x00C0
 43e:	88 23       	and	r24, r24
 440:	ac f4       	brge	.+42     	; 0x46c <USART_Flush+0x40>
 442:	a6 ec       	ldi	r26, 0xC6	; 198
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e0 ec       	ldi	r30, 0xC0	; 192
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	8c 91       	ld	r24, X
 44c:	80 93 f0 06 	sts	0x06F0, r24
 450:	80 81       	ld	r24, Z
 452:	88 23       	and	r24, r24
 454:	d4 f3       	brlt	.-12     	; 0x44a <USART_Flush+0x1e>
 456:	08 95       	ret
 458:	ae ec       	ldi	r26, 0xCE	; 206
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	e8 ec       	ldi	r30, 0xC8	; 200
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	8c 91       	ld	r24, X
 462:	80 93 f0 06 	sts	0x06F0, r24
 466:	80 81       	ld	r24, Z
 468:	88 23       	and	r24, r24
 46a:	d4 f3       	brlt	.-12     	; 0x460 <USART_Flush+0x34>
 46c:	08 95       	ret

0000046e <USART_Send>:
 46e:	61 30       	cpi	r22, 0x01	; 1
 470:	41 f0       	breq	.+16     	; 0x482 <USART_Send+0x14>
 472:	e0 ec       	ldi	r30, 0xC0	; 192
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	90 81       	ld	r25, Z
 478:	95 ff       	sbrs	r25, 5
 47a:	fd cf       	rjmp	.-6      	; 0x476 <USART_Send+0x8>
 47c:	80 93 c6 00 	sts	0x00C6, r24
 480:	08 95       	ret
 482:	e8 ec       	ldi	r30, 0xC8	; 200
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	90 81       	ld	r25, Z
 488:	95 ff       	sbrs	r25, 5
 48a:	fd cf       	rjmp	.-6      	; 0x486 <USART_Send+0x18>
 48c:	80 93 ce 00 	sts	0x00CE, r24
 490:	08 95       	ret

00000492 <ADC_init>:
 492:	ea e7       	ldi	r30, 0x7A	; 122
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	80 6e       	ori	r24, 0xE0	; 224
 49a:	80 83       	st	Z, r24
 49c:	08 95       	ret

0000049e <LEDS_Init>:

enum LEDState {INIT,L0,L1,L2,L3,L4,L5,L6,L7} led_state;

void LEDS_Init(){
	led_state = INIT;
 49e:	10 92 4b 07 	sts	0x074B, r1
 4a2:	08 95       	ret

000004a4 <LEDS_Tick>:
}

void LEDS_Tick(){
	unsigned char input = GetKeypadKey();
 4a4:	f3 de       	rcall	.-538    	; 0x28c <GetKeypadKey>
	if(input == 'A') {
 4a6:	81 34       	cpi	r24, 0x41	; 65
 4a8:	19 f4       	brne	.+6      	; 0x4b0 <LEDS_Tick+0xc>
		PORTC = 0x01;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	88 b9       	out	0x08, r24	; 8
 4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <LEDS_Tick+0xe>
	} else {
		PORTC = 0x00;
 4b0:	18 b8       	out	0x08, r1	; 8
	}
	if(USART_IsSendReady(1)) {
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	a7 df       	rcall	.-178    	; 0x404 <USART_IsSendReady>
 4b6:	88 23       	and	r24, r24
 4b8:	19 f0       	breq	.+6      	; 0x4c0 <LEDS_Tick+0x1c>
		USART_Send(GetKeypadKey(), 1);
 4ba:	e8 de       	rcall	.-560    	; 0x28c <GetKeypadKey>
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	d7 df       	rcall	.-82     	; 0x46e <USART_Send>
	}
	if(USART_HasTransmitted(1)) {
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	aa df       	rcall	.-172    	; 0x418 <USART_HasTransmitted>
 4c4:	88 23       	and	r24, r24
 4c6:	11 f0       	breq	.+4      	; 0x4cc <LEDS_Tick+0x28>
		USART_Flush(1);
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	b0 cf       	rjmp	.-160    	; 0x42c <USART_Flush>
 4cc:	08 95       	ret

000004ce <LedSecTask>:
	}
}

void LedSecTask()
{
	LEDS_Init();
 4ce:	e7 df       	rcall	.-50     	; 0x49e <LEDS_Init>
   for(;;) 
   { 	
	LEDS_Tick();
 4d0:	e9 df       	rcall	.-46     	; 0x4a4 <LEDS_Tick>
	vTaskDelay(100); 
 4d2:	84 e6       	ldi	r24, 0x64	; 100
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	98 d4       	rcall	.+2352   	; 0xe08 <vTaskDelay>
 4d8:	fb cf       	rjmp	.-10     	; 0x4d0 <LedSecTask+0x2>

000004da <StartSecPulse>:
   } 
}

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
 4da:	af 92       	push	r10
 4dc:	bf 92       	push	r11
 4de:	cf 92       	push	r12
 4e0:	df 92       	push	r13
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	0f 93       	push	r16
	xTaskCreate(LedSecTask, (signed portCHAR *)"LedSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
 4e8:	a1 2c       	mov	r10, r1
 4ea:	b1 2c       	mov	r11, r1
 4ec:	c1 2c       	mov	r12, r1
 4ee:	d1 2c       	mov	r13, r1
 4f0:	e1 2c       	mov	r14, r1
 4f2:	f1 2c       	mov	r15, r1
 4f4:	08 2f       	mov	r16, r24
 4f6:	20 e0       	ldi	r18, 0x00	; 0
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	45 e5       	ldi	r20, 0x55	; 85
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	62 e0       	ldi	r22, 0x02	; 2
 500:	71 e0       	ldi	r23, 0x01	; 1
 502:	87 e6       	ldi	r24, 0x67	; 103
 504:	92 e0       	ldi	r25, 0x02	; 2
 506:	d0 d1       	rcall	.+928    	; 0x8a8 <xTaskGenericCreate>
}	
 508:	0f 91       	pop	r16
 50a:	ff 90       	pop	r15
 50c:	ef 90       	pop	r14
 50e:	df 90       	pop	r13
 510:	cf 90       	pop	r12
 512:	bf 90       	pop	r11
 514:	af 90       	pop	r10
 516:	08 95       	ret

00000518 <main>:
 
int main(void) 
{ 
   //DDRA = 0x00; PORTA = 0xFF;
   DDRC = 0xFF; PORTC = 0x00;
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	87 b9       	out	0x07, r24	; 7
 51c:	18 b8       	out	0x08, r1	; 8
   DDRB = 0xF0; PORTB = 0x0F;
 51e:	80 ef       	ldi	r24, 0xF0	; 240
 520:	84 b9       	out	0x04, r24	; 4
 522:	8f e0       	ldi	r24, 0x0F	; 15
 524:	85 b9       	out	0x05, r24	; 5
   //DDRD = 0x5F; PORTD = 0xA0;
   
   
   //Initialize components and registers
   ADC_init();
 526:	b5 df       	rcall	.-150    	; 0x492 <ADC_init>
   initUSART(0);
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	4a df       	rcall	.-364    	; 0x3c0 <initUSART>
   initUSART(1);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	48 df       	rcall	.-368    	; 0x3c0 <initUSART>
   
   //Start Tasks  
   StartSecPulse(1);
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	d3 df       	rcall	.-90     	; 0x4da <StartSecPulse>
    //RunSchedular 
   vTaskStartScheduler(); 
 534:	b6 d2       	rcall	.+1388   	; 0xaa2 <vTaskStartScheduler>
 
   return 0; 
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	08 95       	ret

0000053c <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 53c:	31 e1       	ldi	r19, 0x11	; 17
 53e:	fc 01       	movw	r30, r24
 540:	30 83       	st	Z, r19
 542:	31 97       	sbiw	r30, 0x01	; 1
 544:	22 e2       	ldi	r18, 0x22	; 34
 546:	20 83       	st	Z, r18
 548:	fc 01       	movw	r30, r24
 54a:	32 97       	sbiw	r30, 0x02	; 2
 54c:	a3 e3       	ldi	r26, 0x33	; 51
 54e:	a0 83       	st	Z, r26
 550:	fc 01       	movw	r30, r24
 552:	33 97       	sbiw	r30, 0x03	; 3
 554:	60 83       	st	Z, r22
 556:	fc 01       	movw	r30, r24
 558:	34 97       	sbiw	r30, 0x04	; 4
 55a:	70 83       	st	Z, r23
 55c:	fc 01       	movw	r30, r24
 55e:	35 97       	sbiw	r30, 0x05	; 5
 560:	10 82       	st	Z, r1
 562:	fc 01       	movw	r30, r24
 564:	36 97       	sbiw	r30, 0x06	; 6
 566:	60 e8       	ldi	r22, 0x80	; 128
 568:	60 83       	st	Z, r22
 56a:	fc 01       	movw	r30, r24
 56c:	37 97       	sbiw	r30, 0x07	; 7
 56e:	10 82       	st	Z, r1
 570:	fc 01       	movw	r30, r24
 572:	38 97       	sbiw	r30, 0x08	; 8
 574:	62 e0       	ldi	r22, 0x02	; 2
 576:	60 83       	st	Z, r22
 578:	fc 01       	movw	r30, r24
 57a:	39 97       	sbiw	r30, 0x09	; 9
 57c:	63 e0       	ldi	r22, 0x03	; 3
 57e:	60 83       	st	Z, r22
 580:	fc 01       	movw	r30, r24
 582:	3a 97       	sbiw	r30, 0x0a	; 10
 584:	64 e0       	ldi	r22, 0x04	; 4
 586:	60 83       	st	Z, r22
 588:	fc 01       	movw	r30, r24
 58a:	3b 97       	sbiw	r30, 0x0b	; 11
 58c:	65 e0       	ldi	r22, 0x05	; 5
 58e:	60 83       	st	Z, r22
 590:	fc 01       	movw	r30, r24
 592:	3c 97       	sbiw	r30, 0x0c	; 12
 594:	66 e0       	ldi	r22, 0x06	; 6
 596:	60 83       	st	Z, r22
 598:	fc 01       	movw	r30, r24
 59a:	3d 97       	sbiw	r30, 0x0d	; 13
 59c:	67 e0       	ldi	r22, 0x07	; 7
 59e:	60 83       	st	Z, r22
 5a0:	fc 01       	movw	r30, r24
 5a2:	3e 97       	sbiw	r30, 0x0e	; 14
 5a4:	68 e0       	ldi	r22, 0x08	; 8
 5a6:	60 83       	st	Z, r22
 5a8:	fc 01       	movw	r30, r24
 5aa:	3f 97       	sbiw	r30, 0x0f	; 15
 5ac:	69 e0       	ldi	r22, 0x09	; 9
 5ae:	60 83       	st	Z, r22
 5b0:	fc 01       	movw	r30, r24
 5b2:	70 97       	sbiw	r30, 0x10	; 16
 5b4:	60 e1       	ldi	r22, 0x10	; 16
 5b6:	60 83       	st	Z, r22
 5b8:	fc 01       	movw	r30, r24
 5ba:	71 97       	sbiw	r30, 0x11	; 17
 5bc:	30 83       	st	Z, r19
 5be:	fc 01       	movw	r30, r24
 5c0:	72 97       	sbiw	r30, 0x12	; 18
 5c2:	32 e1       	ldi	r19, 0x12	; 18
 5c4:	30 83       	st	Z, r19
 5c6:	fc 01       	movw	r30, r24
 5c8:	73 97       	sbiw	r30, 0x13	; 19
 5ca:	33 e1       	ldi	r19, 0x13	; 19
 5cc:	30 83       	st	Z, r19
 5ce:	fc 01       	movw	r30, r24
 5d0:	74 97       	sbiw	r30, 0x14	; 20
 5d2:	34 e1       	ldi	r19, 0x14	; 20
 5d4:	30 83       	st	Z, r19
 5d6:	fc 01       	movw	r30, r24
 5d8:	75 97       	sbiw	r30, 0x15	; 21
 5da:	35 e1       	ldi	r19, 0x15	; 21
 5dc:	30 83       	st	Z, r19
 5de:	fc 01       	movw	r30, r24
 5e0:	76 97       	sbiw	r30, 0x16	; 22
 5e2:	36 e1       	ldi	r19, 0x16	; 22
 5e4:	30 83       	st	Z, r19
 5e6:	fc 01       	movw	r30, r24
 5e8:	77 97       	sbiw	r30, 0x17	; 23
 5ea:	37 e1       	ldi	r19, 0x17	; 23
 5ec:	30 83       	st	Z, r19
 5ee:	fc 01       	movw	r30, r24
 5f0:	78 97       	sbiw	r30, 0x18	; 24
 5f2:	38 e1       	ldi	r19, 0x18	; 24
 5f4:	30 83       	st	Z, r19
 5f6:	fc 01       	movw	r30, r24
 5f8:	79 97       	sbiw	r30, 0x19	; 25
 5fa:	39 e1       	ldi	r19, 0x19	; 25
 5fc:	30 83       	st	Z, r19
 5fe:	fc 01       	movw	r30, r24
 600:	7a 97       	sbiw	r30, 0x1a	; 26
 602:	30 e2       	ldi	r19, 0x20	; 32
 604:	30 83       	st	Z, r19
 606:	fc 01       	movw	r30, r24
 608:	7b 97       	sbiw	r30, 0x1b	; 27
 60a:	31 e2       	ldi	r19, 0x21	; 33
 60c:	30 83       	st	Z, r19
 60e:	fc 01       	movw	r30, r24
 610:	7c 97       	sbiw	r30, 0x1c	; 28
 612:	20 83       	st	Z, r18
 614:	fc 01       	movw	r30, r24
 616:	7d 97       	sbiw	r30, 0x1d	; 29
 618:	23 e2       	ldi	r18, 0x23	; 35
 61a:	20 83       	st	Z, r18
 61c:	fc 01       	movw	r30, r24
 61e:	7e 97       	sbiw	r30, 0x1e	; 30
 620:	40 83       	st	Z, r20
 622:	fc 01       	movw	r30, r24
 624:	7f 97       	sbiw	r30, 0x1f	; 31
 626:	50 83       	st	Z, r21
 628:	fc 01       	movw	r30, r24
 62a:	b0 97       	sbiw	r30, 0x20	; 32
 62c:	26 e2       	ldi	r18, 0x26	; 38
 62e:	20 83       	st	Z, r18
 630:	fc 01       	movw	r30, r24
 632:	b1 97       	sbiw	r30, 0x21	; 33
 634:	27 e2       	ldi	r18, 0x27	; 39
 636:	20 83       	st	Z, r18
 638:	fc 01       	movw	r30, r24
 63a:	b2 97       	sbiw	r30, 0x22	; 34
 63c:	28 e2       	ldi	r18, 0x28	; 40
 63e:	20 83       	st	Z, r18
 640:	fc 01       	movw	r30, r24
 642:	b3 97       	sbiw	r30, 0x23	; 35
 644:	29 e2       	ldi	r18, 0x29	; 41
 646:	20 83       	st	Z, r18
 648:	fc 01       	movw	r30, r24
 64a:	b4 97       	sbiw	r30, 0x24	; 36
 64c:	20 e3       	ldi	r18, 0x30	; 48
 64e:	20 83       	st	Z, r18
 650:	fc 01       	movw	r30, r24
 652:	b5 97       	sbiw	r30, 0x25	; 37
 654:	21 e3       	ldi	r18, 0x31	; 49
 656:	20 83       	st	Z, r18
 658:	9c 01       	movw	r18, r24
 65a:	26 52       	subi	r18, 0x26	; 38
 65c:	31 09       	sbc	r19, r1
 65e:	82 2f       	mov	r24, r18
 660:	93 2f       	mov	r25, r19
 662:	08 95       	ret

00000664 <xPortStartScheduler>:
 664:	10 92 89 00 	sts	0x0089, r1
 668:	8c e7       	ldi	r24, 0x7C	; 124
 66a:	80 93 88 00 	sts	0x0088, r24
 66e:	8b e0       	ldi	r24, 0x0B	; 11
 670:	80 93 81 00 	sts	0x0081, r24
 674:	ef e6       	ldi	r30, 0x6F	; 111
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	82 60       	ori	r24, 0x02	; 2
 67c:	80 83       	st	Z, r24
 67e:	a0 91 ff 06 	lds	r26, 0x06FF
 682:	b0 91 00 07 	lds	r27, 0x0700
 686:	cd 91       	ld	r28, X+
 688:	cd bf       	out	0x3d, r28	; 61
 68a:	dd 91       	ld	r29, X+
 68c:	de bf       	out	0x3e, r29	; 62
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	bf 91       	pop	r27
 698:	af 91       	pop	r26
 69a:	9f 91       	pop	r25
 69c:	8f 91       	pop	r24
 69e:	7f 91       	pop	r23
 6a0:	6f 91       	pop	r22
 6a2:	5f 91       	pop	r21
 6a4:	4f 91       	pop	r20
 6a6:	3f 91       	pop	r19
 6a8:	2f 91       	pop	r18
 6aa:	1f 91       	pop	r17
 6ac:	0f 91       	pop	r16
 6ae:	ff 90       	pop	r15
 6b0:	ef 90       	pop	r14
 6b2:	df 90       	pop	r13
 6b4:	cf 90       	pop	r12
 6b6:	bf 90       	pop	r11
 6b8:	af 90       	pop	r10
 6ba:	9f 90       	pop	r9
 6bc:	8f 90       	pop	r8
 6be:	7f 90       	pop	r7
 6c0:	6f 90       	pop	r6
 6c2:	5f 90       	pop	r5
 6c4:	4f 90       	pop	r4
 6c6:	3f 90       	pop	r3
 6c8:	2f 90       	pop	r2
 6ca:	1f 90       	pop	r1
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	08 95       	ret
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	08 95       	ret

000006d8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 6d8:	0f 92       	push	r0
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	f8 94       	cli
 6de:	0f 92       	push	r0
 6e0:	1f 92       	push	r1
 6e2:	11 24       	eor	r1, r1
 6e4:	2f 92       	push	r2
 6e6:	3f 92       	push	r3
 6e8:	4f 92       	push	r4
 6ea:	5f 92       	push	r5
 6ec:	6f 92       	push	r6
 6ee:	7f 92       	push	r7
 6f0:	8f 92       	push	r8
 6f2:	9f 92       	push	r9
 6f4:	af 92       	push	r10
 6f6:	bf 92       	push	r11
 6f8:	cf 92       	push	r12
 6fa:	df 92       	push	r13
 6fc:	ef 92       	push	r14
 6fe:	ff 92       	push	r15
 700:	0f 93       	push	r16
 702:	1f 93       	push	r17
 704:	2f 93       	push	r18
 706:	3f 93       	push	r19
 708:	4f 93       	push	r20
 70a:	5f 93       	push	r21
 70c:	6f 93       	push	r22
 70e:	7f 93       	push	r23
 710:	8f 93       	push	r24
 712:	9f 93       	push	r25
 714:	af 93       	push	r26
 716:	bf 93       	push	r27
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	ef 93       	push	r30
 71e:	ff 93       	push	r31
 720:	a0 91 ff 06 	lds	r26, 0x06FF
 724:	b0 91 00 07 	lds	r27, 0x0700
 728:	0d b6       	in	r0, 0x3d	; 61
 72a:	0d 92       	st	X+, r0
 72c:	0e b6       	in	r0, 0x3e	; 62
 72e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 730:	86 d3       	rcall	.+1804   	; 0xe3e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 732:	a0 91 ff 06 	lds	r26, 0x06FF
 736:	b0 91 00 07 	lds	r27, 0x0700
 73a:	cd 91       	ld	r28, X+
 73c:	cd bf       	out	0x3d, r28	; 61
 73e:	dd 91       	ld	r29, X+
 740:	de bf       	out	0x3e, r29	; 62
 742:	ff 91       	pop	r31
 744:	ef 91       	pop	r30
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	bf 91       	pop	r27
 74c:	af 91       	pop	r26
 74e:	9f 91       	pop	r25
 750:	8f 91       	pop	r24
 752:	7f 91       	pop	r23
 754:	6f 91       	pop	r22
 756:	5f 91       	pop	r21
 758:	4f 91       	pop	r20
 75a:	3f 91       	pop	r19
 75c:	2f 91       	pop	r18
 75e:	1f 91       	pop	r17
 760:	0f 91       	pop	r16
 762:	ff 90       	pop	r15
 764:	ef 90       	pop	r14
 766:	df 90       	pop	r13
 768:	cf 90       	pop	r12
 76a:	bf 90       	pop	r11
 76c:	af 90       	pop	r10
 76e:	9f 90       	pop	r9
 770:	8f 90       	pop	r8
 772:	7f 90       	pop	r7
 774:	6f 90       	pop	r6
 776:	5f 90       	pop	r5
 778:	4f 90       	pop	r4
 77a:	3f 90       	pop	r3
 77c:	2f 90       	pop	r2
 77e:	1f 90       	pop	r1
 780:	0f 90       	pop	r0
 782:	0f be       	out	0x3f, r0	; 63
 784:	0f 90       	pop	r0

	asm volatile ( "ret" );
 786:	08 95       	ret

00000788 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	f8 94       	cli
 78e:	0f 92       	push	r0
 790:	1f 92       	push	r1
 792:	11 24       	eor	r1, r1
 794:	2f 92       	push	r2
 796:	3f 92       	push	r3
 798:	4f 92       	push	r4
 79a:	5f 92       	push	r5
 79c:	6f 92       	push	r6
 79e:	7f 92       	push	r7
 7a0:	8f 92       	push	r8
 7a2:	9f 92       	push	r9
 7a4:	af 92       	push	r10
 7a6:	bf 92       	push	r11
 7a8:	cf 92       	push	r12
 7aa:	df 92       	push	r13
 7ac:	ef 92       	push	r14
 7ae:	ff 92       	push	r15
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	2f 93       	push	r18
 7b6:	3f 93       	push	r19
 7b8:	4f 93       	push	r20
 7ba:	5f 93       	push	r21
 7bc:	6f 93       	push	r22
 7be:	7f 93       	push	r23
 7c0:	8f 93       	push	r24
 7c2:	9f 93       	push	r25
 7c4:	af 93       	push	r26
 7c6:	bf 93       	push	r27
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	ef 93       	push	r30
 7ce:	ff 93       	push	r31
 7d0:	a0 91 ff 06 	lds	r26, 0x06FF
 7d4:	b0 91 00 07 	lds	r27, 0x0700
 7d8:	0d b6       	in	r0, 0x3d	; 61
 7da:	0d 92       	st	X+, r0
 7dc:	0e b6       	in	r0, 0x3e	; 62
 7de:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 7e0:	8f d1       	rcall	.+798    	; 0xb00 <vTaskIncrementTick>
	vTaskSwitchContext();
 7e2:	2d d3       	rcall	.+1626   	; 0xe3e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 7e4:	a0 91 ff 06 	lds	r26, 0x06FF
 7e8:	b0 91 00 07 	lds	r27, 0x0700
 7ec:	cd 91       	ld	r28, X+
 7ee:	cd bf       	out	0x3d, r28	; 61
 7f0:	dd 91       	ld	r29, X+
 7f2:	de bf       	out	0x3e, r29	; 62
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	bf 91       	pop	r27
 7fe:	af 91       	pop	r26
 800:	9f 91       	pop	r25
 802:	8f 91       	pop	r24
 804:	7f 91       	pop	r23
 806:	6f 91       	pop	r22
 808:	5f 91       	pop	r21
 80a:	4f 91       	pop	r20
 80c:	3f 91       	pop	r19
 80e:	2f 91       	pop	r18
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	ff 90       	pop	r15
 816:	ef 90       	pop	r14
 818:	df 90       	pop	r13
 81a:	cf 90       	pop	r12
 81c:	bf 90       	pop	r11
 81e:	af 90       	pop	r10
 820:	9f 90       	pop	r9
 822:	8f 90       	pop	r8
 824:	7f 90       	pop	r7
 826:	6f 90       	pop	r6
 828:	5f 90       	pop	r5
 82a:	4f 90       	pop	r4
 82c:	3f 90       	pop	r3
 82e:	2f 90       	pop	r2
 830:	1f 90       	pop	r1
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	0f 90       	pop	r0

	asm volatile ( "ret" );
 838:	08 95       	ret

0000083a <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 83a:	a6 df       	rcall	.-180    	; 0x788 <vPortYieldFromTick>
		asm volatile ( "reti" );
 83c:	18 95       	reti

0000083e <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	ec 01       	movw	r28, r24
 844:	e0 91 ff 06 	lds	r30, 0x06FF
 848:	f0 91 00 07 	lds	r31, 0x0700
 84c:	93 83       	std	Z+3, r25	; 0x03
 84e:	82 83       	std	Z+2, r24	; 0x02
 850:	80 91 f7 06 	lds	r24, 0x06F7
 854:	90 91 f8 06 	lds	r25, 0x06F8
 858:	c8 17       	cp	r28, r24
 85a:	d9 07       	cpc	r29, r25
 85c:	60 f4       	brcc	.+24     	; 0x876 <prvAddCurrentTaskToDelayedList+0x38>
 85e:	60 91 ff 06 	lds	r22, 0x06FF
 862:	70 91 00 07 	lds	r23, 0x0700
 866:	80 91 fb 06 	lds	r24, 0x06FB
 86a:	90 91 fc 06 	lds	r25, 0x06FC
 86e:	6e 5f       	subi	r22, 0xFE	; 254
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	89 dc       	rcall	.-1774   	; 0x186 <vListInsert>
 874:	16 c0       	rjmp	.+44     	; 0x8a2 <prvAddCurrentTaskToDelayedList+0x64>
 876:	60 91 ff 06 	lds	r22, 0x06FF
 87a:	70 91 00 07 	lds	r23, 0x0700
 87e:	80 91 fd 06 	lds	r24, 0x06FD
 882:	90 91 fe 06 	lds	r25, 0x06FE
 886:	6e 5f       	subi	r22, 0xFE	; 254
 888:	7f 4f       	sbci	r23, 0xFF	; 255
 88a:	7d dc       	rcall	.-1798   	; 0x186 <vListInsert>
 88c:	80 91 00 01 	lds	r24, 0x0100
 890:	90 91 01 01 	lds	r25, 0x0101
 894:	c8 17       	cp	r28, r24
 896:	d9 07       	cpc	r29, r25
 898:	20 f4       	brcc	.+8      	; 0x8a2 <prvAddCurrentTaskToDelayedList+0x64>
 89a:	d0 93 01 01 	sts	0x0101, r29
 89e:	c0 93 00 01 	sts	0x0100, r28
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	08 95       	ret

000008a8 <xTaskGenericCreate>:
 8a8:	4f 92       	push	r4
 8aa:	5f 92       	push	r5
 8ac:	6f 92       	push	r6
 8ae:	7f 92       	push	r7
 8b0:	8f 92       	push	r8
 8b2:	9f 92       	push	r9
 8b4:	af 92       	push	r10
 8b6:	bf 92       	push	r11
 8b8:	cf 92       	push	r12
 8ba:	df 92       	push	r13
 8bc:	ef 92       	push	r14
 8be:	ff 92       	push	r15
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	4c 01       	movw	r8, r24
 8ca:	3b 01       	movw	r6, r22
 8cc:	5a 01       	movw	r10, r20
 8ce:	29 01       	movw	r4, r18
 8d0:	81 e2       	ldi	r24, 0x21	; 33
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	f9 db       	rcall	.-2062   	; 0xc8 <pvPortMalloc>
 8d6:	ec 01       	movw	r28, r24
 8d8:	00 97       	sbiw	r24, 0x00	; 0
 8da:	09 f4       	brne	.+2      	; 0x8de <xTaskGenericCreate+0x36>
 8dc:	d0 c0       	rjmp	.+416    	; 0xa7e <xTaskGenericCreate+0x1d6>
 8de:	c1 14       	cp	r12, r1
 8e0:	d1 04       	cpc	r13, r1
 8e2:	09 f0       	breq	.+2      	; 0x8e6 <xTaskGenericCreate+0x3e>
 8e4:	c9 c0       	rjmp	.+402    	; 0xa78 <xTaskGenericCreate+0x1d0>
 8e6:	c5 01       	movw	r24, r10
 8e8:	ef db       	rcall	.-2082   	; 0xc8 <pvPortMalloc>
 8ea:	6c 01       	movw	r12, r24
 8ec:	98 8f       	std	Y+24, r25	; 0x18
 8ee:	8f 8b       	std	Y+23, r24	; 0x17
 8f0:	00 97       	sbiw	r24, 0x00	; 0
 8f2:	19 f4       	brne	.+6      	; 0x8fa <xTaskGenericCreate+0x52>
 8f4:	ce 01       	movw	r24, r28
 8f6:	0d dc       	rcall	.-2022   	; 0x112 <vPortFree>
 8f8:	c2 c0       	rjmp	.+388    	; 0xa7e <xTaskGenericCreate+0x1d6>
 8fa:	a5 01       	movw	r20, r10
 8fc:	65 ea       	ldi	r22, 0xA5	; 165
 8fe:	70 e0       	ldi	r23, 0x00	; 0
 900:	c6 01       	movw	r24, r12
 902:	fa d2       	rcall	.+1524   	; 0xef8 <memset>
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	a8 1a       	sub	r10, r24
 908:	b1 08       	sbc	r11, r1
 90a:	8f 89       	ldd	r24, Y+23	; 0x17
 90c:	98 8d       	ldd	r25, Y+24	; 0x18
 90e:	a8 0e       	add	r10, r24
 910:	b9 1e       	adc	r11, r25
 912:	48 e0       	ldi	r20, 0x08	; 8
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	b3 01       	movw	r22, r6
 918:	ce 01       	movw	r24, r28
 91a:	49 96       	adiw	r24, 0x19	; 25
 91c:	f4 d2       	rcall	.+1512   	; 0xf06 <strncpy>
 91e:	18 a2       	std	Y+32, r1	; 0x20
 920:	10 2f       	mov	r17, r16
 922:	04 30       	cpi	r16, 0x04	; 4
 924:	08 f0       	brcs	.+2      	; 0x928 <xTaskGenericCreate+0x80>
 926:	13 e0       	ldi	r17, 0x03	; 3
 928:	1e 8b       	std	Y+22, r17	; 0x16
 92a:	6e 01       	movw	r12, r28
 92c:	e2 e0       	ldi	r30, 0x02	; 2
 92e:	ce 0e       	add	r12, r30
 930:	d1 1c       	adc	r13, r1
 932:	c6 01       	movw	r24, r12
 934:	fd db       	rcall	.-2054   	; 0x130 <vListInitialiseItem>
 936:	ce 01       	movw	r24, r28
 938:	0c 96       	adiw	r24, 0x0c	; 12
 93a:	fa db       	rcall	.-2060   	; 0x130 <vListInitialiseItem>
 93c:	d9 87       	std	Y+9, r29	; 0x09
 93e:	c8 87       	std	Y+8, r28	; 0x08
 940:	84 e0       	ldi	r24, 0x04	; 4
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	81 1b       	sub	r24, r17
 946:	91 09       	sbc	r25, r1
 948:	9d 87       	std	Y+13, r25	; 0x0d
 94a:	8c 87       	std	Y+12, r24	; 0x0c
 94c:	db 8b       	std	Y+19, r29	; 0x13
 94e:	ca 8b       	std	Y+18, r28	; 0x12
 950:	a2 01       	movw	r20, r4
 952:	b4 01       	movw	r22, r8
 954:	c5 01       	movw	r24, r10
 956:	f2 dd       	rcall	.-1052   	; 0x53c <pxPortInitialiseStack>
 958:	99 83       	std	Y+1, r25	; 0x01
 95a:	88 83       	st	Y, r24
 95c:	e1 14       	cp	r14, r1
 95e:	f1 04       	cpc	r15, r1
 960:	19 f0       	breq	.+6      	; 0x968 <xTaskGenericCreate+0xc0>
 962:	f7 01       	movw	r30, r14
 964:	d1 83       	std	Z+1, r29	; 0x01
 966:	c0 83       	st	Z, r28
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	f8 94       	cli
 96c:	0f 92       	push	r0
 96e:	80 91 f9 06 	lds	r24, 0x06F9
 972:	8f 5f       	subi	r24, 0xFF	; 255
 974:	80 93 f9 06 	sts	0x06F9, r24
 978:	80 91 ff 06 	lds	r24, 0x06FF
 97c:	90 91 00 07 	lds	r25, 0x0700
 980:	89 2b       	or	r24, r25
 982:	b9 f5       	brne	.+110    	; 0x9f2 <xTaskGenericCreate+0x14a>
 984:	d0 93 00 07 	sts	0x0700, r29
 988:	c0 93 ff 06 	sts	0x06FF, r28
 98c:	80 91 f9 06 	lds	r24, 0x06F9
 990:	81 30       	cpi	r24, 0x01	; 1
 992:	09 f0       	breq	.+2      	; 0x996 <xTaskGenericCreate+0xee>
 994:	3d c0       	rjmp	.+122    	; 0xa10 <xTaskGenericCreate+0x168>
 996:	e1 2c       	mov	r14, r1
 998:	f1 2c       	mov	r15, r1
 99a:	c7 01       	movw	r24, r14
 99c:	88 0f       	add	r24, r24
 99e:	99 1f       	adc	r25, r25
 9a0:	88 0f       	add	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	8e 0d       	add	r24, r14
 9aa:	9f 1d       	adc	r25, r15
 9ac:	8d 5f       	subi	r24, 0xFD	; 253
 9ae:	98 4f       	sbci	r25, 0xF8	; 248
 9b0:	b1 db       	rcall	.-2206   	; 0x114 <vListInitialise>
 9b2:	ff ef       	ldi	r31, 0xFF	; 255
 9b4:	ef 1a       	sub	r14, r31
 9b6:	ff 0a       	sbc	r15, r31
 9b8:	84 e0       	ldi	r24, 0x04	; 4
 9ba:	e8 16       	cp	r14, r24
 9bc:	f1 04       	cpc	r15, r1
 9be:	69 f7       	brne	.-38     	; 0x99a <xTaskGenericCreate+0xf2>
 9c0:	87 e2       	ldi	r24, 0x27	; 39
 9c2:	97 e0       	ldi	r25, 0x07	; 7
 9c4:	a7 db       	rcall	.-2226   	; 0x114 <vListInitialise>
 9c6:	80 e3       	ldi	r24, 0x30	; 48
 9c8:	97 e0       	ldi	r25, 0x07	; 7
 9ca:	a4 db       	rcall	.-2232   	; 0x114 <vListInitialise>
 9cc:	89 e3       	ldi	r24, 0x39	; 57
 9ce:	97 e0       	ldi	r25, 0x07	; 7
 9d0:	a1 db       	rcall	.-2238   	; 0x114 <vListInitialise>
 9d2:	82 e4       	ldi	r24, 0x42	; 66
 9d4:	97 e0       	ldi	r25, 0x07	; 7
 9d6:	9e db       	rcall	.-2244   	; 0x114 <vListInitialise>
 9d8:	87 e2       	ldi	r24, 0x27	; 39
 9da:	97 e0       	ldi	r25, 0x07	; 7
 9dc:	90 93 fe 06 	sts	0x06FE, r25
 9e0:	80 93 fd 06 	sts	0x06FD, r24
 9e4:	80 e3       	ldi	r24, 0x30	; 48
 9e6:	97 e0       	ldi	r25, 0x07	; 7
 9e8:	90 93 fc 06 	sts	0x06FC, r25
 9ec:	80 93 fb 06 	sts	0x06FB, r24
 9f0:	0f c0       	rjmp	.+30     	; 0xa10 <xTaskGenericCreate+0x168>
 9f2:	80 91 f5 06 	lds	r24, 0x06F5
 9f6:	81 11       	cpse	r24, r1
 9f8:	0b c0       	rjmp	.+22     	; 0xa10 <xTaskGenericCreate+0x168>
 9fa:	e0 91 ff 06 	lds	r30, 0x06FF
 9fe:	f0 91 00 07 	lds	r31, 0x0700
 a02:	86 89       	ldd	r24, Z+22	; 0x16
 a04:	08 17       	cp	r16, r24
 a06:	20 f0       	brcs	.+8      	; 0xa10 <xTaskGenericCreate+0x168>
 a08:	d0 93 00 07 	sts	0x0700, r29
 a0c:	c0 93 ff 06 	sts	0x06FF, r28
 a10:	8e 89       	ldd	r24, Y+22	; 0x16
 a12:	90 91 01 07 	lds	r25, 0x0701
 a16:	98 17       	cp	r25, r24
 a18:	10 f4       	brcc	.+4      	; 0xa1e <xTaskGenericCreate+0x176>
 a1a:	80 93 01 07 	sts	0x0701, r24
 a1e:	90 91 02 07 	lds	r25, 0x0702
 a22:	9f 5f       	subi	r25, 0xFF	; 255
 a24:	90 93 02 07 	sts	0x0702, r25
 a28:	90 91 f6 06 	lds	r25, 0x06F6
 a2c:	98 17       	cp	r25, r24
 a2e:	10 f4       	brcc	.+4      	; 0xa34 <xTaskGenericCreate+0x18c>
 a30:	80 93 f6 06 	sts	0x06F6, r24
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	9c 01       	movw	r18, r24
 a38:	22 0f       	add	r18, r18
 a3a:	33 1f       	adc	r19, r19
 a3c:	22 0f       	add	r18, r18
 a3e:	33 1f       	adc	r19, r19
 a40:	22 0f       	add	r18, r18
 a42:	33 1f       	adc	r19, r19
 a44:	82 0f       	add	r24, r18
 a46:	93 1f       	adc	r25, r19
 a48:	b6 01       	movw	r22, r12
 a4a:	8d 5f       	subi	r24, 0xFD	; 253
 a4c:	98 4f       	sbci	r25, 0xF8	; 248
 a4e:	74 db       	rcall	.-2328   	; 0x138 <vListInsertEnd>
 a50:	0f 90       	pop	r0
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	80 91 f5 06 	lds	r24, 0x06F5
 a58:	88 23       	and	r24, r24
 a5a:	51 f0       	breq	.+20     	; 0xa70 <xTaskGenericCreate+0x1c8>
 a5c:	e0 91 ff 06 	lds	r30, 0x06FF
 a60:	f0 91 00 07 	lds	r31, 0x0700
 a64:	86 89       	ldd	r24, Z+22	; 0x16
 a66:	80 17       	cp	r24, r16
 a68:	28 f4       	brcc	.+10     	; 0xa74 <xTaskGenericCreate+0x1cc>
 a6a:	36 de       	rcall	.-916    	; 0x6d8 <vPortYield>
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	08 c0       	rjmp	.+16     	; 0xa80 <xTaskGenericCreate+0x1d8>
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	06 c0       	rjmp	.+12     	; 0xa80 <xTaskGenericCreate+0x1d8>
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	04 c0       	rjmp	.+8      	; 0xa80 <xTaskGenericCreate+0x1d8>
 a78:	d8 8e       	std	Y+24, r13	; 0x18
 a7a:	cf 8a       	std	Y+23, r12	; 0x17
 a7c:	3e cf       	rjmp	.-388    	; 0x8fa <xTaskGenericCreate+0x52>
 a7e:	8f ef       	ldi	r24, 0xFF	; 255
 a80:	df 91       	pop	r29
 a82:	cf 91       	pop	r28
 a84:	1f 91       	pop	r17
 a86:	0f 91       	pop	r16
 a88:	ff 90       	pop	r15
 a8a:	ef 90       	pop	r14
 a8c:	df 90       	pop	r13
 a8e:	cf 90       	pop	r12
 a90:	bf 90       	pop	r11
 a92:	af 90       	pop	r10
 a94:	9f 90       	pop	r9
 a96:	8f 90       	pop	r8
 a98:	7f 90       	pop	r7
 a9a:	6f 90       	pop	r6
 a9c:	5f 90       	pop	r5
 a9e:	4f 90       	pop	r4
 aa0:	08 95       	ret

00000aa2 <vTaskStartScheduler>:
 aa2:	af 92       	push	r10
 aa4:	bf 92       	push	r11
 aa6:	cf 92       	push	r12
 aa8:	df 92       	push	r13
 aaa:	ef 92       	push	r14
 aac:	ff 92       	push	r15
 aae:	0f 93       	push	r16
 ab0:	a1 2c       	mov	r10, r1
 ab2:	b1 2c       	mov	r11, r1
 ab4:	c1 2c       	mov	r12, r1
 ab6:	d1 2c       	mov	r13, r1
 ab8:	e1 2c       	mov	r14, r1
 aba:	f1 2c       	mov	r15, r1
 abc:	00 e0       	ldi	r16, 0x00	; 0
 abe:	20 e0       	ldi	r18, 0x00	; 0
 ac0:	30 e0       	ldi	r19, 0x00	; 0
 ac2:	45 e5       	ldi	r20, 0x55	; 85
 ac4:	50 e0       	ldi	r21, 0x00	; 0
 ac6:	6d e0       	ldi	r22, 0x0D	; 13
 ac8:	71 e0       	ldi	r23, 0x01	; 1
 aca:	8a ec       	ldi	r24, 0xCA	; 202
 acc:	96 e0       	ldi	r25, 0x06	; 6
 ace:	ec de       	rcall	.-552    	; 0x8a8 <xTaskGenericCreate>
 ad0:	81 30       	cpi	r24, 0x01	; 1
 ad2:	41 f4       	brne	.+16     	; 0xae4 <vTaskStartScheduler+0x42>
 ad4:	f8 94       	cli
 ad6:	80 93 f5 06 	sts	0x06F5, r24
 ada:	10 92 f8 06 	sts	0x06F8, r1
 ade:	10 92 f7 06 	sts	0x06F7, r1
 ae2:	c0 dd       	rcall	.-1152   	; 0x664 <xPortStartScheduler>
 ae4:	0f 91       	pop	r16
 ae6:	ff 90       	pop	r15
 ae8:	ef 90       	pop	r14
 aea:	df 90       	pop	r13
 aec:	cf 90       	pop	r12
 aee:	bf 90       	pop	r11
 af0:	af 90       	pop	r10
 af2:	08 95       	ret

00000af4 <vTaskSuspendAll>:
 af4:	80 91 f4 06 	lds	r24, 0x06F4
 af8:	8f 5f       	subi	r24, 0xFF	; 255
 afa:	80 93 f4 06 	sts	0x06F4, r24
 afe:	08 95       	ret

00000b00 <vTaskIncrementTick>:
 b00:	0f 93       	push	r16
 b02:	1f 93       	push	r17
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	80 91 f4 06 	lds	r24, 0x06F4
 b0c:	81 11       	cpse	r24, r1
 b0e:	af c0       	rjmp	.+350    	; 0xc6e <vTaskIncrementTick+0x16e>
 b10:	80 91 f7 06 	lds	r24, 0x06F7
 b14:	90 91 f8 06 	lds	r25, 0x06F8
 b18:	01 96       	adiw	r24, 0x01	; 1
 b1a:	90 93 f8 06 	sts	0x06F8, r25
 b1e:	80 93 f7 06 	sts	0x06F7, r24
 b22:	80 91 f7 06 	lds	r24, 0x06F7
 b26:	90 91 f8 06 	lds	r25, 0x06F8
 b2a:	89 2b       	or	r24, r25
 b2c:	99 f5       	brne	.+102    	; 0xb94 <vTaskIncrementTick+0x94>
 b2e:	80 91 fd 06 	lds	r24, 0x06FD
 b32:	90 91 fe 06 	lds	r25, 0x06FE
 b36:	20 91 fb 06 	lds	r18, 0x06FB
 b3a:	30 91 fc 06 	lds	r19, 0x06FC
 b3e:	30 93 fe 06 	sts	0x06FE, r19
 b42:	20 93 fd 06 	sts	0x06FD, r18
 b46:	90 93 fc 06 	sts	0x06FC, r25
 b4a:	80 93 fb 06 	sts	0x06FB, r24
 b4e:	80 91 f1 06 	lds	r24, 0x06F1
 b52:	8f 5f       	subi	r24, 0xFF	; 255
 b54:	80 93 f1 06 	sts	0x06F1, r24
 b58:	e0 91 fd 06 	lds	r30, 0x06FD
 b5c:	f0 91 fe 06 	lds	r31, 0x06FE
 b60:	80 81       	ld	r24, Z
 b62:	81 11       	cpse	r24, r1
 b64:	07 c0       	rjmp	.+14     	; 0xb74 <vTaskIncrementTick+0x74>
 b66:	8f ef       	ldi	r24, 0xFF	; 255
 b68:	9f ef       	ldi	r25, 0xFF	; 255
 b6a:	90 93 01 01 	sts	0x0101, r25
 b6e:	80 93 00 01 	sts	0x0100, r24
 b72:	10 c0       	rjmp	.+32     	; 0xb94 <vTaskIncrementTick+0x94>
 b74:	e0 91 fd 06 	lds	r30, 0x06FD
 b78:	f0 91 fe 06 	lds	r31, 0x06FE
 b7c:	05 80       	ldd	r0, Z+5	; 0x05
 b7e:	f6 81       	ldd	r31, Z+6	; 0x06
 b80:	e0 2d       	mov	r30, r0
 b82:	06 80       	ldd	r0, Z+6	; 0x06
 b84:	f7 81       	ldd	r31, Z+7	; 0x07
 b86:	e0 2d       	mov	r30, r0
 b88:	82 81       	ldd	r24, Z+2	; 0x02
 b8a:	93 81       	ldd	r25, Z+3	; 0x03
 b8c:	90 93 01 01 	sts	0x0101, r25
 b90:	80 93 00 01 	sts	0x0100, r24
 b94:	20 91 f7 06 	lds	r18, 0x06F7
 b98:	30 91 f8 06 	lds	r19, 0x06F8
 b9c:	80 91 00 01 	lds	r24, 0x0100
 ba0:	90 91 01 01 	lds	r25, 0x0101
 ba4:	28 17       	cp	r18, r24
 ba6:	39 07       	cpc	r19, r25
 ba8:	08 f4       	brcc	.+2      	; 0xbac <vTaskIncrementTick+0xac>
 baa:	66 c0       	rjmp	.+204    	; 0xc78 <vTaskIncrementTick+0x178>
 bac:	e0 91 fd 06 	lds	r30, 0x06FD
 bb0:	f0 91 fe 06 	lds	r31, 0x06FE
 bb4:	80 81       	ld	r24, Z
 bb6:	88 23       	and	r24, r24
 bb8:	99 f0       	breq	.+38     	; 0xbe0 <vTaskIncrementTick+0xe0>
 bba:	e0 91 fd 06 	lds	r30, 0x06FD
 bbe:	f0 91 fe 06 	lds	r31, 0x06FE
 bc2:	05 80       	ldd	r0, Z+5	; 0x05
 bc4:	f6 81       	ldd	r31, Z+6	; 0x06
 bc6:	e0 2d       	mov	r30, r0
 bc8:	c6 81       	ldd	r28, Z+6	; 0x06
 bca:	d7 81       	ldd	r29, Z+7	; 0x07
 bcc:	8a 81       	ldd	r24, Y+2	; 0x02
 bce:	9b 81       	ldd	r25, Y+3	; 0x03
 bd0:	20 91 f7 06 	lds	r18, 0x06F7
 bd4:	30 91 f8 06 	lds	r19, 0x06F8
 bd8:	28 17       	cp	r18, r24
 bda:	39 07       	cpc	r19, r25
 bdc:	f8 f4       	brcc	.+62     	; 0xc1c <vTaskIncrementTick+0x11c>
 bde:	19 c0       	rjmp	.+50     	; 0xc12 <vTaskIncrementTick+0x112>
 be0:	8f ef       	ldi	r24, 0xFF	; 255
 be2:	9f ef       	ldi	r25, 0xFF	; 255
 be4:	90 93 01 01 	sts	0x0101, r25
 be8:	80 93 00 01 	sts	0x0100, r24
 bec:	45 c0       	rjmp	.+138    	; 0xc78 <vTaskIncrementTick+0x178>
 bee:	e0 91 fd 06 	lds	r30, 0x06FD
 bf2:	f0 91 fe 06 	lds	r31, 0x06FE
 bf6:	05 80       	ldd	r0, Z+5	; 0x05
 bf8:	f6 81       	ldd	r31, Z+6	; 0x06
 bfa:	e0 2d       	mov	r30, r0
 bfc:	c6 81       	ldd	r28, Z+6	; 0x06
 bfe:	d7 81       	ldd	r29, Z+7	; 0x07
 c00:	8a 81       	ldd	r24, Y+2	; 0x02
 c02:	9b 81       	ldd	r25, Y+3	; 0x03
 c04:	20 91 f7 06 	lds	r18, 0x06F7
 c08:	30 91 f8 06 	lds	r19, 0x06F8
 c0c:	28 17       	cp	r18, r24
 c0e:	39 07       	cpc	r19, r25
 c10:	28 f4       	brcc	.+10     	; 0xc1c <vTaskIncrementTick+0x11c>
 c12:	90 93 01 01 	sts	0x0101, r25
 c16:	80 93 00 01 	sts	0x0100, r24
 c1a:	2e c0       	rjmp	.+92     	; 0xc78 <vTaskIncrementTick+0x178>
 c1c:	8e 01       	movw	r16, r28
 c1e:	0e 5f       	subi	r16, 0xFE	; 254
 c20:	1f 4f       	sbci	r17, 0xFF	; 255
 c22:	c8 01       	movw	r24, r16
 c24:	eb da       	rcall	.-2602   	; 0x1fc <vListRemove>
 c26:	8c 89       	ldd	r24, Y+20	; 0x14
 c28:	9d 89       	ldd	r25, Y+21	; 0x15
 c2a:	89 2b       	or	r24, r25
 c2c:	19 f0       	breq	.+6      	; 0xc34 <vTaskIncrementTick+0x134>
 c2e:	ce 01       	movw	r24, r28
 c30:	0c 96       	adiw	r24, 0x0c	; 12
 c32:	e4 da       	rcall	.-2616   	; 0x1fc <vListRemove>
 c34:	8e 89       	ldd	r24, Y+22	; 0x16
 c36:	90 91 f6 06 	lds	r25, 0x06F6
 c3a:	98 17       	cp	r25, r24
 c3c:	10 f4       	brcc	.+4      	; 0xc42 <vTaskIncrementTick+0x142>
 c3e:	80 93 f6 06 	sts	0x06F6, r24
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	9c 01       	movw	r18, r24
 c46:	22 0f       	add	r18, r18
 c48:	33 1f       	adc	r19, r19
 c4a:	22 0f       	add	r18, r18
 c4c:	33 1f       	adc	r19, r19
 c4e:	22 0f       	add	r18, r18
 c50:	33 1f       	adc	r19, r19
 c52:	82 0f       	add	r24, r18
 c54:	93 1f       	adc	r25, r19
 c56:	b8 01       	movw	r22, r16
 c58:	8d 5f       	subi	r24, 0xFD	; 253
 c5a:	98 4f       	sbci	r25, 0xF8	; 248
 c5c:	6d da       	rcall	.-2854   	; 0x138 <vListInsertEnd>
 c5e:	e0 91 fd 06 	lds	r30, 0x06FD
 c62:	f0 91 fe 06 	lds	r31, 0x06FE
 c66:	80 81       	ld	r24, Z
 c68:	81 11       	cpse	r24, r1
 c6a:	c1 cf       	rjmp	.-126    	; 0xbee <vTaskIncrementTick+0xee>
 c6c:	b9 cf       	rjmp	.-142    	; 0xbe0 <vTaskIncrementTick+0xe0>
 c6e:	80 91 f3 06 	lds	r24, 0x06F3
 c72:	8f 5f       	subi	r24, 0xFF	; 255
 c74:	80 93 f3 06 	sts	0x06F3, r24
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	1f 91       	pop	r17
 c7e:	0f 91       	pop	r16
 c80:	08 95       	ret

00000c82 <xTaskResumeAll>:
 c82:	af 92       	push	r10
 c84:	bf 92       	push	r11
 c86:	cf 92       	push	r12
 c88:	df 92       	push	r13
 c8a:	ef 92       	push	r14
 c8c:	ff 92       	push	r15
 c8e:	0f 93       	push	r16
 c90:	1f 93       	push	r17
 c92:	cf 93       	push	r28
 c94:	df 93       	push	r29
 c96:	0f b6       	in	r0, 0x3f	; 63
 c98:	f8 94       	cli
 c9a:	0f 92       	push	r0
 c9c:	80 91 f4 06 	lds	r24, 0x06F4
 ca0:	81 50       	subi	r24, 0x01	; 1
 ca2:	80 93 f4 06 	sts	0x06F4, r24
 ca6:	80 91 f4 06 	lds	r24, 0x06F4
 caa:	81 11       	cpse	r24, r1
 cac:	63 c0       	rjmp	.+198    	; 0xd74 <xTaskResumeAll+0xf2>
 cae:	80 91 f9 06 	lds	r24, 0x06F9
 cb2:	81 11       	cpse	r24, r1
 cb4:	2d c0       	rjmp	.+90     	; 0xd10 <xTaskResumeAll+0x8e>
 cb6:	61 c0       	rjmp	.+194    	; 0xd7a <xTaskResumeAll+0xf8>
 cb8:	d6 01       	movw	r26, r12
 cba:	ed 91       	ld	r30, X+
 cbc:	fc 91       	ld	r31, X
 cbe:	c6 81       	ldd	r28, Z+6	; 0x06
 cc0:	d7 81       	ldd	r29, Z+7	; 0x07
 cc2:	ce 01       	movw	r24, r28
 cc4:	0c 96       	adiw	r24, 0x0c	; 12
 cc6:	9a da       	rcall	.-2764   	; 0x1fc <vListRemove>
 cc8:	8e 01       	movw	r16, r28
 cca:	0e 5f       	subi	r16, 0xFE	; 254
 ccc:	1f 4f       	sbci	r17, 0xFF	; 255
 cce:	c8 01       	movw	r24, r16
 cd0:	95 da       	rcall	.-2774   	; 0x1fc <vListRemove>
 cd2:	8e 89       	ldd	r24, Y+22	; 0x16
 cd4:	90 91 f6 06 	lds	r25, 0x06F6
 cd8:	98 17       	cp	r25, r24
 cda:	10 f4       	brcc	.+4      	; 0xce0 <xTaskResumeAll+0x5e>
 cdc:	80 93 f6 06 	sts	0x06F6, r24
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	9c 01       	movw	r18, r24
 ce4:	22 0f       	add	r18, r18
 ce6:	33 1f       	adc	r19, r19
 ce8:	22 0f       	add	r18, r18
 cea:	33 1f       	adc	r19, r19
 cec:	22 0f       	add	r18, r18
 cee:	33 1f       	adc	r19, r19
 cf0:	82 0f       	add	r24, r18
 cf2:	93 1f       	adc	r25, r19
 cf4:	b8 01       	movw	r22, r16
 cf6:	8d 5f       	subi	r24, 0xFD	; 253
 cf8:	98 4f       	sbci	r25, 0xF8	; 248
 cfa:	1e da       	rcall	.-3012   	; 0x138 <vListInsertEnd>
 cfc:	e0 91 ff 06 	lds	r30, 0x06FF
 d00:	f0 91 00 07 	lds	r31, 0x0700
 d04:	9e 89       	ldd	r25, Y+22	; 0x16
 d06:	86 89       	ldd	r24, Z+22	; 0x16
 d08:	98 17       	cp	r25, r24
 d0a:	88 f0       	brcs	.+34     	; 0xd2e <xTaskResumeAll+0xac>
 d0c:	ba 2c       	mov	r11, r10
 d0e:	0f c0       	rjmp	.+30     	; 0xd2e <xTaskResumeAll+0xac>
 d10:	b1 2c       	mov	r11, r1
 d12:	0f 2e       	mov	r0, r31
 d14:	f9 e3       	ldi	r31, 0x39	; 57
 d16:	ef 2e       	mov	r14, r31
 d18:	f7 e0       	ldi	r31, 0x07	; 7
 d1a:	ff 2e       	mov	r15, r31
 d1c:	f0 2d       	mov	r31, r0
 d1e:	0f 2e       	mov	r0, r31
 d20:	fe e3       	ldi	r31, 0x3E	; 62
 d22:	cf 2e       	mov	r12, r31
 d24:	f7 e0       	ldi	r31, 0x07	; 7
 d26:	df 2e       	mov	r13, r31
 d28:	f0 2d       	mov	r31, r0
 d2a:	aa 24       	eor	r10, r10
 d2c:	a3 94       	inc	r10
 d2e:	f7 01       	movw	r30, r14
 d30:	80 81       	ld	r24, Z
 d32:	81 11       	cpse	r24, r1
 d34:	c1 cf       	rjmp	.-126    	; 0xcb8 <xTaskResumeAll+0x36>
 d36:	80 91 f3 06 	lds	r24, 0x06F3
 d3a:	88 23       	and	r24, r24
 d3c:	79 f0       	breq	.+30     	; 0xd5c <xTaskResumeAll+0xda>
 d3e:	80 91 f3 06 	lds	r24, 0x06F3
 d42:	88 23       	and	r24, r24
 d44:	91 f0       	breq	.+36     	; 0xd6a <xTaskResumeAll+0xe8>
 d46:	dc de       	rcall	.-584    	; 0xb00 <vTaskIncrementTick>
 d48:	80 91 f3 06 	lds	r24, 0x06F3
 d4c:	81 50       	subi	r24, 0x01	; 1
 d4e:	80 93 f3 06 	sts	0x06F3, r24
 d52:	80 91 f3 06 	lds	r24, 0x06F3
 d56:	81 11       	cpse	r24, r1
 d58:	f6 cf       	rjmp	.-20     	; 0xd46 <xTaskResumeAll+0xc4>
 d5a:	07 c0       	rjmp	.+14     	; 0xd6a <xTaskResumeAll+0xe8>
 d5c:	f1 e0       	ldi	r31, 0x01	; 1
 d5e:	bf 16       	cp	r11, r31
 d60:	21 f0       	breq	.+8      	; 0xd6a <xTaskResumeAll+0xe8>
 d62:	80 91 f2 06 	lds	r24, 0x06F2
 d66:	81 30       	cpi	r24, 0x01	; 1
 d68:	39 f4       	brne	.+14     	; 0xd78 <xTaskResumeAll+0xf6>
 d6a:	10 92 f2 06 	sts	0x06F2, r1
 d6e:	b4 dc       	rcall	.-1688   	; 0x6d8 <vPortYield>
 d70:	81 e0       	ldi	r24, 0x01	; 1
 d72:	03 c0       	rjmp	.+6      	; 0xd7a <xTaskResumeAll+0xf8>
 d74:	80 e0       	ldi	r24, 0x00	; 0
 d76:	01 c0       	rjmp	.+2      	; 0xd7a <xTaskResumeAll+0xf8>
 d78:	80 e0       	ldi	r24, 0x00	; 0
 d7a:	0f 90       	pop	r0
 d7c:	0f be       	out	0x3f, r0	; 63
 d7e:	df 91       	pop	r29
 d80:	cf 91       	pop	r28
 d82:	1f 91       	pop	r17
 d84:	0f 91       	pop	r16
 d86:	ff 90       	pop	r15
 d88:	ef 90       	pop	r14
 d8a:	df 90       	pop	r13
 d8c:	cf 90       	pop	r12
 d8e:	bf 90       	pop	r11
 d90:	af 90       	pop	r10
 d92:	08 95       	ret

00000d94 <prvIdleTask>:
 d94:	0f 2e       	mov	r0, r31
 d96:	f2 e4       	ldi	r31, 0x42	; 66
 d98:	ef 2e       	mov	r14, r31
 d9a:	f7 e0       	ldi	r31, 0x07	; 7
 d9c:	ff 2e       	mov	r15, r31
 d9e:	f0 2d       	mov	r31, r0
 da0:	0f 2e       	mov	r0, r31
 da2:	f7 e4       	ldi	r31, 0x47	; 71
 da4:	cf 2e       	mov	r12, r31
 da6:	f7 e0       	ldi	r31, 0x07	; 7
 da8:	df 2e       	mov	r13, r31
 daa:	f0 2d       	mov	r31, r0
 dac:	c3 e0       	ldi	r28, 0x03	; 3
 dae:	d7 e0       	ldi	r29, 0x07	; 7
 db0:	80 91 fa 06 	lds	r24, 0x06FA
 db4:	88 23       	and	r24, r24
 db6:	19 f1       	breq	.+70     	; 0xdfe <prvIdleTask+0x6a>
 db8:	9d de       	rcall	.-710    	; 0xaf4 <vTaskSuspendAll>
 dba:	d7 01       	movw	r26, r14
 dbc:	1c 91       	ld	r17, X
 dbe:	61 df       	rcall	.-318    	; 0xc82 <xTaskResumeAll>
 dc0:	11 23       	and	r17, r17
 dc2:	e9 f0       	breq	.+58     	; 0xdfe <prvIdleTask+0x6a>
 dc4:	0f b6       	in	r0, 0x3f	; 63
 dc6:	f8 94       	cli
 dc8:	0f 92       	push	r0
 dca:	d6 01       	movw	r26, r12
 dcc:	ed 91       	ld	r30, X+
 dce:	fc 91       	ld	r31, X
 dd0:	06 81       	ldd	r16, Z+6	; 0x06
 dd2:	17 81       	ldd	r17, Z+7	; 0x07
 dd4:	c8 01       	movw	r24, r16
 dd6:	02 96       	adiw	r24, 0x02	; 2
 dd8:	11 da       	rcall	.-3038   	; 0x1fc <vListRemove>
 dda:	80 91 f9 06 	lds	r24, 0x06F9
 dde:	81 50       	subi	r24, 0x01	; 1
 de0:	80 93 f9 06 	sts	0x06F9, r24
 de4:	80 91 fa 06 	lds	r24, 0x06FA
 de8:	81 50       	subi	r24, 0x01	; 1
 dea:	80 93 fa 06 	sts	0x06FA, r24
 dee:	0f 90       	pop	r0
 df0:	0f be       	out	0x3f, r0	; 63
 df2:	f8 01       	movw	r30, r16
 df4:	87 89       	ldd	r24, Z+23	; 0x17
 df6:	90 8d       	ldd	r25, Z+24	; 0x18
 df8:	8c d9       	rcall	.-3304   	; 0x112 <vPortFree>
 dfa:	c8 01       	movw	r24, r16
 dfc:	8a d9       	rcall	.-3308   	; 0x112 <vPortFree>
 dfe:	88 81       	ld	r24, Y
 e00:	82 30       	cpi	r24, 0x02	; 2
 e02:	b0 f2       	brcs	.-84     	; 0xdb0 <prvIdleTask+0x1c>
 e04:	69 dc       	rcall	.-1838   	; 0x6d8 <vPortYield>
 e06:	d4 cf       	rjmp	.-88     	; 0xdb0 <prvIdleTask+0x1c>

00000e08 <vTaskDelay>:
 e08:	cf 93       	push	r28
 e0a:	df 93       	push	r29
 e0c:	ec 01       	movw	r28, r24
 e0e:	00 97       	sbiw	r24, 0x00	; 0
 e10:	91 f0       	breq	.+36     	; 0xe36 <vTaskDelay+0x2e>
 e12:	70 de       	rcall	.-800    	; 0xaf4 <vTaskSuspendAll>
 e14:	80 91 f7 06 	lds	r24, 0x06F7
 e18:	90 91 f8 06 	lds	r25, 0x06F8
 e1c:	c8 0f       	add	r28, r24
 e1e:	d9 1f       	adc	r29, r25
 e20:	80 91 ff 06 	lds	r24, 0x06FF
 e24:	90 91 00 07 	lds	r25, 0x0700
 e28:	02 96       	adiw	r24, 0x02	; 2
 e2a:	e8 d9       	rcall	.-3120   	; 0x1fc <vListRemove>
 e2c:	ce 01       	movw	r24, r28
 e2e:	07 dd       	rcall	.-1522   	; 0x83e <prvAddCurrentTaskToDelayedList>
 e30:	28 df       	rcall	.-432    	; 0xc82 <xTaskResumeAll>
 e32:	81 11       	cpse	r24, r1
 e34:	01 c0       	rjmp	.+2      	; 0xe38 <vTaskDelay+0x30>
 e36:	50 dc       	rcall	.-1888   	; 0x6d8 <vPortYield>
 e38:	df 91       	pop	r29
 e3a:	cf 91       	pop	r28
 e3c:	08 95       	ret

00000e3e <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 e3e:	80 91 f4 06 	lds	r24, 0x06F4
 e42:	81 11       	cpse	r24, r1
 e44:	13 c0       	rjmp	.+38     	; 0xe6c <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 e46:	80 91 f6 06 	lds	r24, 0x06F6
 e4a:	90 e0       	ldi	r25, 0x00	; 0
 e4c:	fc 01       	movw	r30, r24
 e4e:	ee 0f       	add	r30, r30
 e50:	ff 1f       	adc	r31, r31
 e52:	ee 0f       	add	r30, r30
 e54:	ff 1f       	adc	r31, r31
 e56:	ee 0f       	add	r30, r30
 e58:	ff 1f       	adc	r31, r31
 e5a:	8e 0f       	add	r24, r30
 e5c:	9f 1f       	adc	r25, r31
 e5e:	fc 01       	movw	r30, r24
 e60:	ed 5f       	subi	r30, 0xFD	; 253
 e62:	f8 4f       	sbci	r31, 0xF8	; 248
 e64:	80 81       	ld	r24, Z
 e66:	88 23       	and	r24, r24
 e68:	29 f0       	breq	.+10     	; 0xe74 <vTaskSwitchContext+0x36>
 e6a:	1b c0       	rjmp	.+54     	; 0xea2 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 e6c:	81 e0       	ldi	r24, 0x01	; 1
 e6e:	80 93 f2 06 	sts	0x06F2, r24
 e72:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 e74:	80 91 f6 06 	lds	r24, 0x06F6
 e78:	81 50       	subi	r24, 0x01	; 1
 e7a:	80 93 f6 06 	sts	0x06F6, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 e7e:	80 91 f6 06 	lds	r24, 0x06F6
 e82:	90 e0       	ldi	r25, 0x00	; 0
 e84:	fc 01       	movw	r30, r24
 e86:	ee 0f       	add	r30, r30
 e88:	ff 1f       	adc	r31, r31
 e8a:	ee 0f       	add	r30, r30
 e8c:	ff 1f       	adc	r31, r31
 e8e:	ee 0f       	add	r30, r30
 e90:	ff 1f       	adc	r31, r31
 e92:	8e 0f       	add	r24, r30
 e94:	9f 1f       	adc	r25, r31
 e96:	fc 01       	movw	r30, r24
 e98:	ed 5f       	subi	r30, 0xFD	; 253
 e9a:	f8 4f       	sbci	r31, 0xF8	; 248
 e9c:	80 81       	ld	r24, Z
 e9e:	88 23       	and	r24, r24
 ea0:	49 f3       	breq	.-46     	; 0xe74 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 ea2:	e0 91 f6 06 	lds	r30, 0x06F6
 ea6:	f0 e0       	ldi	r31, 0x00	; 0
 ea8:	cf 01       	movw	r24, r30
 eaa:	88 0f       	add	r24, r24
 eac:	99 1f       	adc	r25, r25
 eae:	88 0f       	add	r24, r24
 eb0:	99 1f       	adc	r25, r25
 eb2:	88 0f       	add	r24, r24
 eb4:	99 1f       	adc	r25, r25
 eb6:	e8 0f       	add	r30, r24
 eb8:	f9 1f       	adc	r31, r25
 eba:	ed 5f       	subi	r30, 0xFD	; 253
 ebc:	f8 4f       	sbci	r31, 0xF8	; 248
 ebe:	a1 81       	ldd	r26, Z+1	; 0x01
 ec0:	b2 81       	ldd	r27, Z+2	; 0x02
 ec2:	12 96       	adiw	r26, 0x02	; 2
 ec4:	0d 90       	ld	r0, X+
 ec6:	bc 91       	ld	r27, X
 ec8:	a0 2d       	mov	r26, r0
 eca:	b2 83       	std	Z+2, r27	; 0x02
 ecc:	a1 83       	std	Z+1, r26	; 0x01
 ece:	cf 01       	movw	r24, r30
 ed0:	03 96       	adiw	r24, 0x03	; 3
 ed2:	a8 17       	cp	r26, r24
 ed4:	b9 07       	cpc	r27, r25
 ed6:	31 f4       	brne	.+12     	; 0xee4 <vTaskSwitchContext+0xa6>
 ed8:	12 96       	adiw	r26, 0x02	; 2
 eda:	8d 91       	ld	r24, X+
 edc:	9c 91       	ld	r25, X
 ede:	13 97       	sbiw	r26, 0x03	; 3
 ee0:	92 83       	std	Z+2, r25	; 0x02
 ee2:	81 83       	std	Z+1, r24	; 0x01
 ee4:	01 80       	ldd	r0, Z+1	; 0x01
 ee6:	f2 81       	ldd	r31, Z+2	; 0x02
 ee8:	e0 2d       	mov	r30, r0
 eea:	86 81       	ldd	r24, Z+6	; 0x06
 eec:	97 81       	ldd	r25, Z+7	; 0x07
 eee:	90 93 00 07 	sts	0x0700, r25
 ef2:	80 93 ff 06 	sts	0x06FF, r24
 ef6:	08 95       	ret

00000ef8 <memset>:
 ef8:	dc 01       	movw	r26, r24
 efa:	01 c0       	rjmp	.+2      	; 0xefe <memset+0x6>
 efc:	6d 93       	st	X+, r22
 efe:	41 50       	subi	r20, 0x01	; 1
 f00:	50 40       	sbci	r21, 0x00	; 0
 f02:	e0 f7       	brcc	.-8      	; 0xefc <memset+0x4>
 f04:	08 95       	ret

00000f06 <strncpy>:
 f06:	fb 01       	movw	r30, r22
 f08:	dc 01       	movw	r26, r24
 f0a:	41 50       	subi	r20, 0x01	; 1
 f0c:	50 40       	sbci	r21, 0x00	; 0
 f0e:	48 f0       	brcs	.+18     	; 0xf22 <strncpy+0x1c>
 f10:	01 90       	ld	r0, Z+
 f12:	0d 92       	st	X+, r0
 f14:	00 20       	and	r0, r0
 f16:	c9 f7       	brne	.-14     	; 0xf0a <strncpy+0x4>
 f18:	01 c0       	rjmp	.+2      	; 0xf1c <strncpy+0x16>
 f1a:	1d 92       	st	X+, r1
 f1c:	41 50       	subi	r20, 0x01	; 1
 f1e:	50 40       	sbci	r21, 0x00	; 0
 f20:	e0 f7       	brcc	.-8      	; 0xf1a <strncpy+0x14>
 f22:	08 95       	ret

00000f24 <_exit>:
 f24:	f8 94       	cli

00000f26 <__stop_program>:
 f26:	ff cf       	rjmp	.-2      	; 0xf26 <__stop_program>
